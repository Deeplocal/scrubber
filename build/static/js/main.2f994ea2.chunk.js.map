{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","authEndpoint","scopes","hash","window","location","search","substring","split","reduce","initial","item","parts","decodeURIComponent","App","getInfo","fetch","then","res","json","data","setState","clientId","redirectUri","ipAddr","copyToClipboard","e","navigator","clipboard","writeText","state","token","console","log","copyState","catch","err","error","handleSubmit","bind","_token","code","this","event","key","preventDefault","document","getElementById","innerHTML","join","className","src","logo","alt","contentEditable","id","onKeyDown","href","Component","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,kC,8MCG9BC,G,MAAe,0CAEtBC,EAAS,CACb,iBAIEC,EAAOC,OAAOC,SAASC,OACxBC,UAAU,GACVC,MAAM,KACNC,QAAO,SAASC,EAASC,GACxB,GAAIA,EAAM,CACR,IAAIC,EAAQD,EAAKH,MAAM,KACvBE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IAE/C,OAAOF,IACN,IAyFUI,E,kDArFb,aAAe,IAAD,8BACZ,gBAqBFC,QAAU,WACRC,MAAM,SACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAC1BC,SAAUF,EAAKE,SACfC,YAAaH,EAAKI,aA3BR,EA+BdC,gBAAkB,SAACC,GACjBC,UAAUC,UAAUC,UAAU,EAAKC,MAAMC,OACxCd,MAAK,WACJe,QAAQC,IAAI,iBACZ,EAAKZ,SAAS,CACZa,UAAW,qBAGdC,OAAM,SAAAC,GAELJ,QAAQK,MAAM,wBAAyBD,OAvCzC,EAAKN,MAAQ,CACXC,MAAO,KACPG,UAAW,qBACXZ,SAAU,GACVC,YAAa,IAEf,EAAKe,aAAe,EAAKA,aAAaC,KAAlB,gBARR,E,gEAYZ,IAAIC,EAASrC,EAAKsC,KACdD,GAEFE,KAAKrB,SAAS,CACZU,MAAOS,IAGXE,KAAK3B,Y,mCA0BM4B,GACO,UAAdA,EAAMC,MACRD,EAAME,iBACNH,KAAKrB,SAAS,CAACC,SAAUwB,SAASC,eAAe,SAASC,YAC1D5C,OAAOC,SAAP,UAAmBJ,EAAnB,yCAAgEyC,KAAKZ,MAAMR,SAA3E,yBAAoGoB,KAAKZ,MAAMP,YAA/G,kBAAoIrB,EAAO+C,KAAK,W,+BAI5I,IAAD,EACyCP,KAAKZ,MAAhDC,EADE,EACFA,MAAkBT,GADhB,EACKY,UADL,EACgBZ,UAAUC,EAD1B,EAC0BA,YACjC,OACE,yBAAK2B,UAAU,OACb,yBAAKA,UAAU,QACb,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,WAEzCX,KAAKZ,MAAMC,OACX,yBAAKmB,UAAU,QAAf,6BAEA,0BAAMI,gBAAgB,OAAOC,GAAG,QAAQL,UAAU,eAAeM,UAAWd,KAAKJ,cAAehB,GAChG,6BACA,uBACE4B,UAAU,yBACVO,KAAI,UAAKxD,EAAL,yCAAkDqB,EAAlD,yBAA2EC,EAA3E,kBAAgGrB,EAAO+C,KAAK,SAFlH,qBAQDP,KAAKZ,MAAMC,OACV,yBAAKmB,UAAU,kBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,QAAQnB,IAEzB,yBAAKmB,UAAU,OAAf,kD,GA/EQQ,aCVEC,QACW,cAA7BvD,OAAOC,SAASuD,UAEe,UAA7BxD,OAAOC,SAASuD,UAEhBxD,OAAOC,SAASuD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASC,eAAe,SD6H3C,kBAAmBpB,WACrBA,UAAUqC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdhC,OAAM,SAAAE,GACLL,QAAQK,MAAMA,EAAM+B,c","file":"static/js/main.2f994ea2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.3c5be41e.svg\";","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nexport const authEndpoint = 'https://accounts.spotify.com/authorize';\n// Replace with your app's client ID, redirect URI and desired scopes\nconst scopes = [\n  \"user-top-read\"\n];\n// Get the hash of the url\n\nlet hash = window.location.search\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\n// window.location.search = \"\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      copyState: \"Click to Copy Code\",\n      clientId: '',\n      redirectUri: '',\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  componentDidMount() {\n    // Set token\n    let _token = hash.code;\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n    }\n    this.getInfo();\n  }\n\n  getInfo = () => {\n    fetch('/info')\n    .then(res => res.json())\n    .then(data => this.setState({ \n      clientId: data.clientId,\n      redirectUri: data.ipAddr  \n    }))\n  }\n\n  copyToClipboard = (e) => {\n    navigator.clipboard.writeText(this.state.token)\n    .then(() => {\n      console.log(\"Copied Token!\");\n      this.setState({\n        copyState: \"Copied Token!\"\n      });\n    })\n    .catch(err => {\n      // This can happen if the user denies clipboard permissions:\n      console.error('Could not copy text: ', err);\n    });\n  };\n\n  handleSubmit(event) {\n    if (event.key === 'Enter') {\n      event.preventDefault(); \n      this.setState({clientId: document.getElementById('final').innerHTML});\n      window.location=`${authEndpoint}?response_type=code&client_id=${this.state.clientId}&redirect_uri=${this.state.redirectUri}&scope=${scopes.join(\"%20\")}`\n    }\n  }\n\nrender() {\n  var {token, copyState, clientId, redirectUri} = this.state\n  return (\n    <div className=\"App\">\n      <div className=\"logo\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </div>\n      {!this.state.token && (\n        <div className=\"logo\">\n        Paste your client ID here:\n        <span contentEditable=\"true\" id=\"final\" className=\"client-input\" onKeyDown={this.handleSubmit}>{clientId}</span> \n        <br></br>\n        <a\n          className=\"btn btn--loginApp-link\"\n          href={`${authEndpoint}?response_type=code&client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}`}\n        >\n          Login to Spotify\n        </a>\n        </div>\n      )}\n      {this.state.token && (\n        <div className=\"code-container\">\n          <div className=\"code-outer-div\">\n            <div className=\"code\">{token}</div>\n            </div>\n          <div className=\"btn\" >Paste the code above into your terminal!</div>\n        </div>\n        )}\n    </div>\n  );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}